//AUTHOR: Deontae Williams
//COURSE: CPT 187
//PURPOSE: lets the customer to select available items.
//STARTDATE: 4/26/21

package edu.cpt187.williams.exercise7;

import java.util.Scanner;

//Start of MainClass
public class MainClass 
{
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login","Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to MainMenu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterOrderFIle.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	//Start of Main Method
	public static void main(String[] args) 
	{
		//Creates an instance from the Supportive Class called Order
		Order currentOrder = new Order();

		//Creates an instance from the Supportive Class called Inventory
		Inventory currentInventory = new Inventory();

		//Starts the Scanner
		Scanner input = new Scanner(System.in);

		//Creates an instance from the Supportive Class called WriteOrder
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);

		//Creates an instance from the Supportive Class called UserAccount
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		String userName = "";
		char menuSelection = ' ';

		//Displays Welcome Banner
		displayWelcomeBanner();

		//Displays Menu Selection
		menuSelection = validateMainMenu(input);

		//Start First run-while
		while (menuSelection != 'Q')
		{
			//set UserAccountArrays
			currentUser.setUserAccountArrays();

			//Get username input
			userName = getUserName(input);

			//if selection is not 'A'
			if (menuSelection != 'A')
			{
				//set Search index
				currentUser.setSearchedIndex(userName);


				//if index greater than or equal to 0
				if (currentUser.getSearchedIndex() >= 0)
				{
					//display results
					displayAccountResults(userName);
				}//end index greater than or equal to 0

				//else
				else
				{
					//write one record
					currentUser.setWriteOneRecord(userName, getPassword(input));

					//display results
					displayAccountResults();
				}//end of else
			}//End of if not 'A'

			//else is 'A'
			else
			{
				//set searched index
				currentUser.setSearchedIndex(userName, getPassword(input));

				//if index less then 0
				if (currentUser.getSearchedIndex() < 0 )
				{
					//display error
					displayLoginError();
				}//end of index less then 0

				//else index is greater
				else
				{
					//display fileSelection
					menuSelection = validateFileSelection(input);

					//2nd run-while menuSelection is not 'R'
					while (menuSelection != 'R')
					{
						//if selection is 'A'
						if (menuSelection == 'A')
						{
							//set load items in inventory
							currentInventory.setLoadItems(getFileName(input));

							//if recordCount less than or equal 0
							if (currentInventory.getRecordCount() <= 0)
							{
								//displays file error
								displayFileError();
							}//End recordCount less than or equal 0

							//else
							else
							{
								//displays recordReport
								displayRecordReport(currentInventory.getRecordCount());
							}//end of else
						}//end if selection is 'A'

						//else
						else
						{
							//display set Search Index
							currentInventory.setSearchIndex(validateSearchValue(input));

							//if Item SearchIndex less than 0
							if (currentInventory.getItemSearchIndex() < 0)
							{
								//display not found
								displayNotFound();
							}//End if Item SearchIndex less than 0

							//else
							else
							{
								//set get item index
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());

								//get itemIDs
								currentOrder.setItemID(currentInventory.getItemIDs());

								//get ItemPrices
								currentOrder.setItemPrice(currentInventory.getItemPrices());

								//get itemNames
								currentOrder.setItemName(currentInventory.getItemNames());

								//set how many
								currentOrder.setHowMany(validateHowMany(input));

								//if inStockCount is less than HowMany
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									//display out of stock
									displayOutOfStock();
								}//end if inStockCount is less than HowMany

								//else
								else
								{
									//ValidateDiscountMenu
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									//Gets discount name
									currentOrder.setDiscountName(currentInventory.getDiscountNames());

									//Gets discount rate
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());

									//Decrease stock
									currentOrder.setDecreaseInStock(currentInventory);

									//Gets prize name
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									//Writes order to file
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());

									//if rate greater than 0.0
									if (currentOrder.getDiscountRate() > 0.0)
									{
										//displays with discounts
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//end of if rate greater than 0.0

									//else if rate less than 0.0
									else
									{
										//displays without discounts
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),  currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//end else if rate less than 0.0
								}//end of else
							}//End of else
						}//end of else

						//display fileSelection
						menuSelection = validateFileSelection(input);

					}//End 2nd run-while menuSelection is not 'R'
				}//end else index is greater
			}//end of else is 'A'

			//Displays Menu Selection
			menuSelection = validateMainMenu(input);

		}//End First run-while

		//load items
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		//if RecordCount is greater than 0
		if (orders.getRecordCount() > 0)
		{
			//LoadItems
			currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

			//Displays Final Report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotal(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//End of RecordCount is greater than 0

		//Displays Farewell Message
		displayFarewellMessage();

		//Closes the Scanner
		input.close();

	}//End of Main Method

	//----------------=VOIDS=-------------------

	//Start of WelcomeBanner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the Shop and Stop!");
		System.out.println("Where You can found the items that you are looking for!");
		System.out.println("You can even return your item if your not happey!\n");
	}//End of WelcomeBanner

	//Start of FarewellMessage
	public static void displayFarewellMessage()
	{
		System.out.println("\nThank you for your business.");
		System.out.println("Have a nice day!");
	}//End of FatewellMessage

	//Start of outOfStock
	public static void displayOutOfStock()
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("--------------------------------------------------------");
	}//End of outOfStock

	//Start of Loaded Report
	public static void displayInventoryLoaded()
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("INVENTORY LOADED REPORT");
		System.out.println("Inventory in-stock counts have been processed");
		System.out.println("--------------------------------------------------------");
	}//End of Loaded Report

	//Start of not open
	public static void displayNotOpen()
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("File Error");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("--------------------------------------------------------");
	}//End of not open

	//Start of Record Report
	public static void displayRecordReport(int borrowedRecordsCount)
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("RECORDS REPORT");
		System.out.printf("%1d%18s\n", borrowedRecordsCount, "records processed");
		System.out.println("--------------------------------------------------------");
	}//End of Record Report

	//Start of NotFound
	public static void displayNotFound()
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("--------------------------------------------------------");
	}//End of NotFound

	//Start of account results not created (OverLoaded)
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%1s%1s%1s\n","Account not created: username, ", borrowedUserName,", already exists");
		System.out.println("--------------------------------------------------------");
	}//End of account results not created (OverLoaded)

	//Start of account results created
	public static void displayAccountResults()
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created.");
		System.out.println("--------------------------------------------------------");
	}//End of account results created

	//Start login error
	public static void displayLoginError()
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("--------------------------------------------------------");

	}//End login error

	//Start file error
	public static void displayFileError()
	{
		System.out.println("--------------------------------------------------------");
		System.out.println("File ERROR");
		System.out.println("The file named was not found or could not be opened.");
		System.out.println("--------------------------------------------------------");

	}//End fileError

	//Start of MainMenu
	public static void displayMainMenu()
	{
		int localIndex = 0;

		//Displays Menu Title
		System.out.println("------------------------------------------");
		System.out.println("Main Menu");

		//Start of (localIndex < MENU_OPTIONS.length)
		while (localIndex < MENU_OPTIONS.length)
		{
			//Displays Options
			System.out.printf("%-2s%-4s%1s\n", MENU_CHARS[localIndex], "For", MENU_OPTIONS[localIndex]);
			//Adds localIndex
			localIndex++;
		}//End of (localIndex < MENU_OPTIONS.length)
		System.out.println("------------------------------------------");


		System.out.print("Enter your Selection here: ");

	}//End of Main Menu

	//Start of File Menu
	public static void displayFileMenu()
	{
		int localIndex = 0;

		//Displays Menu Title
		System.out.println("------------------------------------------");
		System.out.println("File Menu");

		//Start of (localIndex < FILE_MENU_OPTIONS.length)
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			//Displays Options
			System.out.printf("%-2s%-4s%1s\n", FILE_MENU_CHARS[localIndex], "For", FILE_MENU_OPTIONS[localIndex]);
			//Adds localIndex
			localIndex++;
		}//End of (localIndex < FILE_MENU_OPTIONS.length)
		System.out.println("------------------------------------------");


		System.out.print("Enter your Selection here: ");

	}//End of File Menu

	//Start of discountMenu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;

		//Displays Menu Title
		System.out.println("------------------------------------------");
		System.out.println("Discount Menu");

		//Start of (localIndex < borrowedDiscountNames.length)
		while (localIndex < borrowedDiscountNames.length)
		{
			//Displays Options
			System.out.printf("%-2s%-4s%-15s%10.1f%2s\n", SUB_MENU_CHARS[localIndex],"For", borrowedDiscountNames[localIndex],(borrowedDiscountRates[localIndex] * 100), "%");
			//Adds localIndex
			localIndex++;
		}//End of (localIndex < borrowedDiscountNames.length)
		System.out.println("------------------------------------------");


		System.out.print("Enter your Selection here: ");

	}//End of discountMenu

	//Start of displayFinalReport
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;

		//Displays Final Report
		System.out.println("------------------------------------------");
		System.out.println("Final Report");
		System.out.println("------------------------------------------");
		System.out.printf("%1s%12s%12s%8s%7s\n", "ID", "NAME","PRICE", "QTY", "TOTAL");

		//run-while
		while (localIndex < borrowedRecordCount)
		{
			System.out.printf("%1d%18s%3s%8.2f%3d%4s%8.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//end run-while

		System.out.println("\nGRAND TOTAL");
		System.out.printf("%1s%8.2f", "$", borrowedGrandTotal);
	}//End of Final Report

	//Start of Order Report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("---------------------------------------------------------");
		System.out.println("Order Report");
		System.out.println("---------------------------------------------------------");
		System.out.printf("%-19s%1s\n\n", "Customer Name:", borrowedUserName);

		System.out.printf("%-19s%1s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-16s%4s%8.2f\n\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("%-19s%1s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-24s%4.1f%2s\n", "Discount Rate", (borrowedDiscountRate * 100), "%");
		System.out.printf("%-19s%-5s%2.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-19s%-5s%2.2f\n\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.printf("%-26s%2d\n\n", "Quantity:", borrowedHowMany);
		System.out.printf("%-19s%-2s%7.2f\n", "SubTotal:", "$", borrowedSubTotal);
		System.out.printf("%-25s%-3.1f%2s\n", "Tax Rate:", (borrowedTaxRate * 100), "%");
		System.out.printf("%-19s%-2s%7.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.printf("%-19s%-2s%7.2f\n\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("%-19s%1s\n", "Prize:", borrowedPrizeName);

		//If Count is greater than 0
		if (borrowedInStockCount > 0)
		{
			System.out.printf("\n%-19s%-3d%1s%1s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName,"s left in-stock!");
		}//End of greater than 0
		System.out.println("---------------------------------------------------------");
	}//End of OrderReport

	//Start of Overloaded Order Report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("---------------------------------------------------------");
		System.out.println("Order Report");
		System.out.println("---------------------------------------------------------");
		System.out.printf("%-19s%1s\n\n", "Customer Name:", borrowedUserName);

		System.out.printf("%-19s%1s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-16s%4s%8.2f\n\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("%-26s%2d\n\n", "Quantity:", borrowedHowMany);
		System.out.printf("%-19s%-2s%7.2f\n", "SubTotal:", "$", borrowedSubTotal);
		System.out.printf("%-25s%-3.1f%2s\n", "Tax Rate:", (borrowedTaxRate * 100), "%");
		System.out.printf("%-19s%-2s%7.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.printf("%-19s%-2s%7.2f\n\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("%-19s%1s\n", "Prize:", borrowedPrizeName);

		//If Count is greater than 0
		if (borrowedInStockCount > 0)
		{

			System.out.printf("\n%-19s%-3d%1s%1s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName,"s left in-stock!");
		}//End of greater than 0
		System.out.println("---------------------------------------------------------");

	}//End of Overloaded Order Report

	//----------------=VRS=---------------------

	//Start of getUserName
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";

		System.out.print("Please enter your name here: ");
		localUserName = borrowedInput.next();

		return localUserName;
	}// End of getUserName

	//Start of getFileName
	public static String getFileName(Scanner borrowedInput)
	{
		String localFile = "";

		System.out.print("Enter the file name with exetension(Ex. file.txt): ");
		localFile = borrowedInput.next();

		return localFile;
	}// End of getFileName

	//Start of getPassword
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";

		System.out.print("Enter yout password:");
		localPassword = borrowedInput.next();

		return localPassword;
	}//end getPassword

	//Start of validateSearchValue
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearch = 0;

		//Displays input
		System.out.print("Enter the search value: ");
		localSearch = borrowedInput.nextInt();

		//while input is less than or equal to 0
		while (localSearch <= 0)
		{
			//Displays Error
			System.out.println("\n--------------------------------------------------");
			System.out.println("The selection made is Invalid. Please try again.");
			System.out.println("--------------------------------------------------");

			//display input again
			System.out.print("Enter the search value: ");
			localSearch = borrowedInput.nextInt();
		}//End run-while

		return localSearch;
	}// End of validateSearchValue

	//Start of validateMainMenu
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';

		//Displays Main Menu
		displayMainMenu();

		//INPUT
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Start of localSelection is not A and Q loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			//Displays Error
			System.out.println("\n--------------------------------------------------");
			System.out.println("The selection made is Invalid. Please try again.");
			System.out.println("--------------------------------------------------");

			//Displays Main Menu again
			displayMainMenu();

			//INPUT
			localSelection = borrowedInput.next().toUpperCase().charAt(0);

		}//End of localSelection is not A and Q loop

		return localSelection;
	}//End of validateMainMenu

	//Start of validateFileSelection
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';

		//Displays File Menu
		displayFileMenu();

		//INPUT
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Start of localSelection is not A and Q loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			//Displays Error
			System.out.println("\n--------------------------------------------------");
			System.out.println("The selection made is Invalid. Please try again.");
			System.out.println("--------------------------------------------------");

			//Displays File Menu again
			displayFileMenu();

			//INPUT
			localSelection = borrowedInput.next().toUpperCase().charAt(0);

		}//End of localSelection is not A and Q loop

		return localSelection;
	}//End of validateFileSelection

	//Start of validatehowMany
	public static String validateHowMany(Scanner borrowedInput)
	{
		String  localHowMany = "";

		//Input
		System.out.print("Enter the Amount: ");
		localHowMany = borrowedInput.next();

		//Start of how many error
		while (Integer.parseInt(localHowMany) <= 0)
		{
			//Displays Error
			System.out.println("\n--------------------------------------------------");
			System.out.println("The selection made is Invalid. Please try again.");
			System.out.println("--------------------------------------------------");

			//Input
			System.out.print("Enter the Amount: ");
			localHowMany = borrowedInput.next();
		}//End of how many error

		return localHowMany;

	}//End of validateHowMany

	//Start of validateDiscountMenu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';

		//Displays discountMenu
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Loop error
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			//Displays error
			System.out.println("\n--------------------------------------------------");
			System.out.println("The selection made is Invalid. Please try again.");
			System.out.println("--------------------------------------------------");

			//Displays discount menu again
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Loop

		return localSelection;
	}//End of validateDiscountMenu

}//End of MainClass
